#include <msp430.h>

int security = 0;
int byte = 0;
int go = 0;
int first_byte = 0;
int second_byte = 0;
int third_byte = 0;
int fourth_byte = 0;
int fifth_byte = 0;
int admin_byte = 204;
int encrypted1 = 0;
int encrypted2 = 0;
int encrypted3 = 0;

void UART_initialization()
{
    P4SEL |= BIT4+BIT5;                       // P4.4,5 = USCI_A1 TXD/RXD
    UCA1CTL1 |= UCSWRST;                      // **Put state machine in reset**
    UCA1CTL1 |= UCSSEL_2;                     // USCI clock source select, SMCLK
    UCA1BR0 = 104;                            // Low byte of baud-rate generator, prescalar setting for 9600 baud rate
    UCA1BR1 = 0;                              // High byte of baud-rate generator
    UCA1CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
    UCA1IE |= UCRXIE;                         // Enable USCI_A1 RX interrupt
}

void granted(); 
{
    
}

void denied(); 
{
    
}

void security_algorithm()
{
    encrypted1 = first_byte + third_byte;
    encrypted2 = second_byte + fourth_byte;
    encrypted3 = (5 * encrypted1) - (4 * encrypted2);
    if (fifth_byte == admin_byte) 
    {
        security = encrypted3; 
    }
    else 
    {
        if (encrypted3 != security) 
        {
            denied(); 
        }
        else 
        {
            granted(); 
        }
    }
}

int main(void)
{
    WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
    UART_initialization();
    P2DIR |= BIT5; //P2.0 output
    P2SEL |= BIT5; //2.0 TA1
    TA2CTL = TASSEL_2 + MC_1 + TACLR; // SMCLK, up-down mode, clear
    TA2CCR0 = 20000; // PWM Period
    TA2CCR2 = 200;
    TA2CCTL2 = OUTMOD_7; // CCR1 toggle/set

    __bis_SR_register(LPM0_bits + GIE);       // Enter LPM3, interrupts enabled
    __no_operation();                         // For debugger
}

// USCI Interrupt
#pragma vector=USCI_A1_VECTOR
__interrupt void USCI_A1_ISR(void)
{
    switch(byte)
    {
    case 0:
        first_byte = UCA1RXBUF;
        break;
    case 1:
        second_byte = UCA1RXBUF;
        break;
    case 2:
        third_byte = UCA1RXBUF;
        break;
    case 3:
        fourth_byte = UCA1RXBUF;
    case 4:
        fifth_byte = UCA1RXBUF;
        UCA1IE |= ~UCRXIE;
    default:
        break;
    }

    if (go == 1)
    {
        security_algorithm();
    }

    if (byte == 4)
    {
        go = 1;
    }
    else
    {
        byte += 1;
    }
}
